<?php

namespace App\Models;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Hash;
use Spatie\Permission\Traits\HasRoles;
use Illuminate\Database\Eloquent\SoftDeletes;

class User extends Authenticatable
{
    use HasFactory, Notifiable, HasRoles, SoftDeletes;
    

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        /**
         *'service_id',
         *'grant_type',
         *'access_token',
         *'refresh_token',
         *'token_expires_at',
         */
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
        /**
         *'access_token',
         *'refresh_token',
         *'token_expires_at',
         */
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /*En esta matriz almacenamos los nombres o las relaciones de los mÃ©todos que deseamos eliminar (o restaurar) cuando SoftDeleteocurre*/
    protected static $relations_to_cascade = ['posts']; 

     //con esto puedo agregar el id del usuario que crea el sale
     public static  function boot(){

        parent::boot(); // TODO: Change the autogenerated stub
        
        //el update ocurre cuando, se hace checkout, con esto automatizo el cambio de estatus del modelo sale
        /* static::updating(function ($model){
            $model->status  = 1 ;            
        });*/

        //al borrar un user, por cascade elimino tambien sus relaciones 
        static::deleting(function($resource) {
            foreach (static::$relations_to_cascade as $relation) {
                foreach ($resource->{$relation}()->get() as $item) {
                    $item->delete();
                }
            }
        });
        //al restaurar un user, por cascade restauro tambien sus relaciones 
        static::restoring(function($resource) {
            foreach (static::$relations_to_cascade as $relation) {
                foreach ($resource->{$relation}()->get() as $item) {
                    $item->withTrashed()->restore();
                }
            }
        });
    }
    
    // un usuario tiene muchos posts
    public function posts()
    {
        return $this->hasMany(Post::class);
    }

    // con este mutador, el password se encripta de manera automatica sin usar el bcryt al crear un user
    public function setPasswordAttribute($password){
        $this->attributes['password'] = Hash::make($password);
    }

    public function scopeAllowed($query){

        if ( auth()->user()->can('view', $this)) { 
            return $query; 
        }
        return $query->where('id',auth()->id());
        
    }
    
}
